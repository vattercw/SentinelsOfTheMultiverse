<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Cancel" xml:space="preserve">
    <value>選択をキャンセル</value>
  </data>
  <data name="CancelAction" xml:space="preserve">
    <value>アクションをキャンセル</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>クローズ</value>
  </data>
  <data name="Discard" xml:space="preserve">
    <value>捨てる</value>
  </data>
  <data name="DiscardFromField" xml:space="preserve">
    <value>フィールドから捨てる</value>
  </data>
  <data name="DiscardSomething" xml:space="preserve">
    <value>何かを捨てる...</value>
  </data>
  <data name="DominionEffect" xml:space="preserve">
    <value>あなたは自治領の影響からカードを描きたいのですか？を</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>終わった</value>
  </data>
  <data name="EndTurn" xml:space="preserve">
    <value>終えた</value>
  </data>
  <data name="GroundPoundEffect" xml:space="preserve">
    <value>このカードを破壊するには、[OK]をクリックします。 2枚のカードを破棄するように、[キャンセル]をクリックします</value>
  </data>
  <data name="Haka" xml:space="preserve">
    <value>ハカ</value>
  </data>
  <data name="HakaOfBattle" xml:space="preserve">
    <value>戦いのハカ</value>
  </data>
  <data name="HakaOfBattleEffect" xml:space="preserve">
    <value>2枚のカードを引く。捨てる少なくとも1カード。廃棄された各カードに1ずつハカで配ら次のダメージを増加させる。</value>
  </data>
  <data name="LegacyDamage" xml:space="preserve">
    <value>あなたはレガシーダメージを受けるようにしたいですか？</value>
  </data>
  <data name="Lose" xml:space="preserve">
    <value>負ける</value>
  </data>
  <data name="MoreCards" xml:space="preserve">
    <value>より多くのカード</value>
  </data>
  <data name="NoDiscard" xml:space="preserve">
    <value>いいえ廃棄ん</value>
  </data>
  <data name="ObsidianFieldDiscard" xml:space="preserve">
    <value>あなたは黒曜石のフィールドを削除するには2枚のカードを破棄するようにしたいですか？</value>
  </data>
  <data name="PlayCard" xml:space="preserve">
    <value>トランプをして遊ぶ</value>
  </data>
  <data name="PlayerPower" xml:space="preserve">
    <value>プレーヤーの電源</value>
  </data>
  <data name="PlayPower" xml:space="preserve">
    <value>電源を演じる</value>
  </data>
  <data name="PleaseDiscard" xml:space="preserve">
    <value>少なくとも、捨ててください</value>
  </data>
  <data name="PleaseSelectAppropriate" xml:space="preserve">
    <value>適切なカードを選択してください。</value>
  </data>
  <data name="Power1" xml:space="preserve">
    <value>パワー1</value>
  </data>
  <data name="Power2" xml:space="preserve">
    <value>パワー2</value>
  </data>
  <data name="Power3" xml:space="preserve">
    <value>パワー3</value>
  </data>
  <data name="Rampage" xml:space="preserve">
    <value>大暴れ</value>
  </data>
  <data name="RampageEffect" xml:space="preserve">
    <value>ハカは各非ヒーロー5メレーダメージを与える。ハカは、各ヒーロー2メレーダメージを与える。</value>
  </data>
  <data name="SelectOne" xml:space="preserve">
    <value>唯一つのターゲットを選択します。 \nは悪役には、[いいえ]を選択し、ターゲットのデフォルトの。</value>
  </data>
  <data name="SelectThree" xml:space="preserve">
    <value>3つ以下のターゲットを選択してください。悪役に\nいいえ]を選択し、対象のデフォルトはない</value>
  </data>
  <data name="ShowHand" xml:space="preserve">
    <value>手を表示</value>
  </data>
  <data name="ThokkSelect" xml:space="preserve">
    <value>悪役にThokk[いいえ]を選択し、ターゲットのデフォルトを実行するためにのみ1ターゲットを選択します。</value>
  </data>
  <data name="Turn" xml:space="preserve">
    <value>ターン</value>
  </data>
  <data name="Win" xml:space="preserve">
    <value>勝つ</value>
  </data>
</root>